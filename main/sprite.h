typedef struct{
  uint16_t w;
  uint16_t h;
  const uint8_t *p;
  uint16_t color;
}Bitmap;

// enemy_fire: 2x 3x7
const uint8_t enemy_fire_data[][7] = {
  // frame 0
  { 0b10000000,
    0b01000000,
    0b00100000,
    0b01000000,
    0b10000000,
    0b01000000,
    0b00100000 },
  // frame 1
  { 0b00100000,
    0b01000000,
    0b10000000,
    0b01000000,
    0b00100000,
    0b01000000,
    0b10000000 },
};
const Bitmap bmpEnemiesFire[2] = {
  {3, 7, (const uint8_t *)&enemy_fire_data[0], WHITE},
  {3, 7, (const uint8_t *)&enemy_fire_data[1], WHITE}
};


// player_fire: 1x6
const uint8_t player_fire_data[][6] = {
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
};
//const Bitmap bmpPlayerFire = Bitmap(1, 6, player_fire_data, 1, RGB(0, 3, 3));


// player_explosion: 2x 16x8
const uint8_t player_explosion_data[][16] = {
  // frame 0
  { 0b00010000, 0b00000100,
    0b10000010, 0b00011001,
    0b00010000, 0b11000000,
    0b00000010, 0b00000010,
    0b01001011, 0b00110001,
    0b00100001, 0b11000100,
    0b00011111, 0b11110000,
    0b00110111, 0b11110000 },
  // frame 1
  { 0b00000100, 0b00000000,
    0b00000000, 0b00100000,
    0b00000101, 0b01000000,
    0b00100100, 0b00000000,
    0b00000011, 0b01100000,
    0b10001011, 0b01010000,
    0b00111111, 0b11001000,
    0b01111111, 0b11101000 },
};
//const Bitmap bmpPlayerExplosion[2] = { Bitmap(16, 8, &player_explosion_data[0], 1, RGB(0, 3, 3)),
//                                       Bitmap(16, 8, &player_explosion_data[1], 1, RGB(0, 3, 3)), };


// player: 14x8
const uint8_t player_data[] = {
  0b00000001, 0b00000000,
  0b00000011, 0b10000000,
  0b00000011, 0b10000000,
  0b00111111, 0b11111000,
  0b01111111, 0b11111100,
  0b01111111, 0b11111100,
  0b01111111, 0b11111100,
  0b01111111, 0b11111100,
};
//const Bitmap bmpPlayer = Bitmap(14, 8, player_data, 1, RGB(0, 3, 3));


// shield: 22x16
const uint8_t shield_data[] = {
  0x0f, 0xff, 0xc0, 0x1f, 0xff, 0xe0, 0x3f, 0xff, 0xf0, 0x7f, 0xff, 0xf8, 0xff, 0xff, 0xfc, 0xff,
  0xff, 0xfc, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfc, 0xff, 0xff,
  0xfc, 0xff, 0xff, 0xfc, 0xfe, 0x03, 0xfc, 0xfc, 0x01, 0xfc, 0xf8, 0x00, 0xfc, 0xf8, 0x00, 0xfc,
};


// enemy_explosion: 12x8
const uint8_t enemy_explosion_data[] = {
  0b00001000, 0b10000000,
  0b01000101, 0b00010000,
  0b00100000, 0b00100000,
  0b00010000, 0b01000000,
  0b11000000, 0b00010000,
  0b00010000, 0b01000000,
  0b00100101, 0b00100000,
  0b01001000, 0b10010000,
};
//const Bitmap bmpEnemyExplosion = Bitmap(12, 8, enemy_explosion_data, 1, RGB(3, 0, 0));
//const Bitmap bmpEnemyExplosionRed = Bitmap(12, 8, enemy_explosion_data, 1, RGB(3, 0, 0));


// enemyA: 2x 12x8
const uint8_t enemyA_data[][16] = {
  // frame 0
  { 0b00000110, 0b00000000,
    0b00001111, 0b00000000,
    0b00011111, 0b10000000,
    0b00110110, 0b11000000,
    0b00111111, 0b11000000,
    0b00001001, 0b00000000,
    0b00010110, 0b10000000,
    0b00101001, 0b01000000, },
  // frame 1
  { 0b00000110, 0b00000000,
    0b00001111, 0b00000000,
    0b00011111, 0b10000000,
    0b00110110, 0b11000000,
    0b00111111, 0b11000000,
    0b00010110, 0b10000000,
    0b00100000, 0b01000000,
    0b00010000, 0b10000000, },
};
//const Bitmap bmpEnemyA[2] = { Bitmap(12, 8, enemyA_data[0], 1, RGB(0, 3, 0)),
//                              Bitmap(12, 8, enemyA_data[1], 1, RGB(0, 3, 0)) };


// enemyB: 2x 12x8
const uint8_t enemyB_data[][16] = {
  // frame 0
  { 0b00010000, 0b01000000,
    0b01001000, 0b10010000,
    0b01011111, 0b11010000,
    0b01110111, 0b01110000,
    0b01111111, 0b11110000,
    0b00111111, 0b11100000,
    0b00010000, 0b01000000,
    0b00100000, 0b00100000, },
  // frame 1
  { 0b00010000, 0b01000000,
    0b00001000, 0b10000000,
    0b00011111, 0b11000000,
    0b00110111, 0b01100000,
    0b01111111, 0b11110000,
    0b01011111, 0b11010000,
    0b01010000, 0b01010000,
    0b00001101, 0b10000000, },
};
//const Bitmap bmpEnemyB[2] = { Bitmap(12, 8, enemyB_data[0], 1, RGB(3, 3, 0)),
//                              Bitmap(12, 8, enemyB_data[1], 1, RGB(3, 3, 0)) };


// enemyC: 2x 12x8
const uint8_t enemyC_data[][16] = {
  // frame 0
  { 0b00001111, 0b00000000,
    0b01111111, 0b11100000,
    0b11111111, 0b11110000,
    0b11100110, 0b01110000,
    0b11111111, 0b11110000,
    0b00111001, 0b11000000,
    0b01100110, 0b01100000,
    0b00110000, 0b11000000 },
  // frame 1
  { 0b00001111, 0b00000000,
    0b01111111, 0b11100000,
    0b11111111, 0b11110000,
    0b11100110, 0b01110000,
    0b11111111, 0b11110000,
    0b00011001, 0b10000000,
    0b00110110, 0b11000000,
    0b11000000, 0b00110000 },
};
//const Bitmap bmpEnemyC[2] = { Bitmap(12, 8, enemyC_data[0], 1, RGB(3, 0, 0)),
//                              Bitmap(12, 8, enemyC_data[1], 1, RGB(3, 0, 0)) };


// enemyD: 16x7
const uint8_t enemyD_data[] = {
  0x07, 0xe0, 0x1f, 0xf8, 0x3f, 0xfc, 0x6d, 0xb6, 0xff, 0xff, 0x39, 0x9c, 0x10, 0x08,
};
//const Bitmap bmpEnemyD = Bitmap(16, 7, enemyD_data, 1, RGB(3, 3, 3));

const uint8_t *p_enemydata[]={
  NULL,
  (const uint8_t *)&enemy_explosion_data[0],
  (const uint8_t *)&enemyA_data[0],
  (const uint8_t *)&enemyA_data[1],
  (const uint8_t *)&enemyB_data[0],
  (const uint8_t *)&enemyB_data[1],
  (const uint8_t *)&enemyC_data[0],
  (const uint8_t *)&enemyC_data[1],
};

const uint16_t enemycolor[]={
  TFT_RED,      /*  UFO */
  TFT_GREEN,    /*  A */
  TFT_CYAN,     /*  B */
  TFT_MAGENTA,  /*  C */
};

const uint8_t  intro [] PROGMEM= {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0xFF, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x0F, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x27, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x03, 0x38, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
0x1F, 0x1F, 0xFF, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x1F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFC, 0xFC, 0xF8, 0x80, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0xFF,
0x3F, 0x3F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xFC, 0xFF,
0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0xFF,
0xFF, 0xFF, 0x3F, 0x1F, 0x1F, 0x1F, 0xDF, 0xDF, 0xDF, 0xDF, 0xC7, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xE0, 0x83, 0x9F, 0x3F, 0x7F, 0xFF, 0xFE,
0xE0, 0xE0, 0xE0, 0xE1, 0xE1, 0xE1, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF,
0xFC, 0x80, 0x80, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x80, 0xF8, 0xFF, 0xFF, 0xFF,
0x7F, 0x7F, 0x70, 0x70, 0x70, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8E, 0x0C, 0xE8, 0xE1,
0xE3, 0xE3, 0xC3, 0x83, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
0xFF, 0xFF, 0x07, 0x87, 0x87, 0xE7, 0xE7, 0xE1, 0xF8, 0xFE, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x3F,
0x38, 0xB8, 0x38, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
0x00, 0x00, 0xF8, 0xFC, 0xFC, 0xFC, 0x3C, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0x03,
0x00, 0x02, 0x02, 0x3A, 0x3E, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x9F, 0x1F, 0x1F, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x03, 0x0F, 0x11, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01,
0x01, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07,
0x07, 0x07, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x07, 0x07, 0x07, 0x07, 0x00,
0x01, 0x01, 0x00, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x0F, 0x1F, 0x0F, 0x0F, 0x07, 0x03,
0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x07, 0x1F, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF,
0xF8, 0xF0, 0x86, 0x1E, 0x3E, 0xFE, 0xFC, 0xF0, 0xC0, 0x00, 0x00, 0x06, 0x3C, 0x7C, 0xF8, 0xF0,
0xE0, 0x80, 0x00, 0x00, 0x0C, 0x7C, 0xFC, 0xFC, 0xFC, 0xC0, 0x00, 0x00, 0x04, 0x3C, 0xFC, 0xFC,
0xF8, 0xF0, 0x80, 0x00, 0x00, 0x00, 0x1E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00,
0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0x0C, 0x0C, 0x0C, 0x0C, 0xFC, 0xFC, 0xF8, 0xF0, 0xF0, 0x00, 0x00, 0x00,
0x00, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00,
0xE0, 0xFC, 0xFE, 0xFE, 0x7E, 0x0E, 0x0E, 0x0C, 0x0C, 0xFC, 0xFC, 0xFC, 0xFC, 0x70, 0x00, 0x00,
0x00, 0x80, 0xE0, 0xF0, 0xF0, 0x78, 0x1C, 0x0C, 0x0E, 0xCE, 0xFE, 0xFE, 0xFE, 0x7E, 0x18, 0x81,
0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xE3, 0xC7, 0x1F, 0x7F, 0xFC, 0xF8, 0xE0, 0x80, 0x01, 0x0F,
0x1F, 0x7F, 0xFF, 0xFE, 0xF8, 0xF8, 0x31, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0xC0, 0x00, 0x00, 0x03,
0x0F, 0x3F, 0xFF, 0xFC, 0xF0, 0xC0, 0x00, 0x07, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x03, 0x1F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0xF0,
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFE,
0xFF, 0xFF, 0x7F, 0x61, 0x60, 0xE0, 0xF0, 0x9E, 0x1F, 0x0F, 0x0F, 0x03, 0x00, 0x00, 0x10, 0x7C,
0x7F, 0x7F, 0x7F, 0x67, 0xE1, 0xE0, 0xE1, 0xE0, 0x09, 0x19, 0xF9, 0xF9, 0xF9, 0xF8, 0xFE, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xE3, 0x8F, 0x1F, 0x7E, 0x7C,
0x70, 0x40, 0x01, 0x07, 0x1F, 0x7F, 0x7E, 0x70, 0x60, 0x01, 0x23, 0xCF, 0x1F, 0x3F, 0x7C, 0x60,
0x00, 0x30, 0xE0, 0x83, 0x1F, 0x3F, 0x7E, 0x7C, 0x7C, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0xF0,
0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x0C, 0xEC, 0xEC, 0x0F, 0x7F, 0x7F, 0x7F, 0x60, 0x00, 0x00, 0x00,
0x7F, 0x7F, 0x7F, 0x43, 0x40, 0x40, 0x40, 0x7F, 0x7F, 0x3F, 0x1F, 0x80, 0x00, 0x00, 0x78, 0x7F,
0x7F, 0x7F, 0x7F, 0x41, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x60, 0x7C, 0x7F, 0x7F, 0x0F,
0x01, 0x00, 0x00, 0x70, 0x7E, 0x7F, 0x1F, 0x0F, 0xC1, 0x00, 0x20, 0x78, 0x78, 0x78, 0x68, 0x60,
0x60, 0x20, 0x38, 0x1E, 0x9F, 0xC7, 0xE3, 0xF1, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
